#!/usr/bin/env python

import roslib
roslib.load_manifest('fence_detection')
import rospy
import tf

from sensor_msgs.msg import LaserScan
from fence_detection.hough_detector import HoughDetector
from dynamic_reconfigure.server import Server
from fence_detection.cfg import HoughFenceConfig

from visualization_msgs.msg import Marker


class HoughNode(object):
    def __init__(self):
        self.hough = HoughDetector()
        self.hough.resolution = 0.01

        self.srv = Server(HoughFenceConfig, self.config_callback)
        self.laser_sub = rospy.Subscriber("scan", LaserScan, self.laser_cb)
        self.marker_pub = rospy.Publisher("visualiztion_marker", Marker)
        self.tf_br = tf.TransformBroadcaster()

    def config_callback(self, config, level):
        self.hough.resolution = config['resolution']
        self.hough.pixel_res = config['pixel_res']
        self.hough.theta_res = config['theta_res']
        self.hough.accum_thresh = config['accum_thresh']
        self.hough.min_length = config['min_length']
        self.hough.gap_length = config['gap_length']
        return config

    def laser_cb(self, msg):
        self.hough.add_data_from_msg(msg)
        self.hough.process()
        marker = self.hough.get_visualization_markers()
        self.marker_pub.publish(marker)

        (x, y, theta) = self.hough.get_fence_position()

        self.tf_br.sendTransform((x, y, 0),
            tf.transformations.quaternion_from_euler(0, 0, theta),
            rospy.Time.now(),
            "hough_fence",
            msg.header.frame_id)

if __name__ == '__main__':
    rospy.init_node('HoughFence', anonymous=True)

    hn = HoughNode()
    rospy.spin()
